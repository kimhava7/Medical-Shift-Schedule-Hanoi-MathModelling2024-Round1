# -*- coding: utf-8 -*-
"""Code - Solve Both Hard and Softs Constraints.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X5NHrhgiDk61Yu7fifH5VBKS4vchpDaY

Tải thư viện OR-Tools
"""

!pip install ortools

from ortools.sat.python import cp_model

def main():
    # Khởi tạo model
    model = cp_model.CpModel()

    # Thông tin cơ bản
    num_days = 28
    num_shifts = 2  # S (ngày), T (đêm)
    num_employees = 8

    # Danh sách nhân viên
    employees = ['An', 'Bình', 'Châu', 'Dương', 'Linh', 'Kiệt', 'Giang', 'Hiếu']
    full_time = ['An', 'Bình', 'Châu', 'Dương']
    part_time = ['Linh', 'Kiệt', 'Giang', 'Hiếu']

    # Tạo biến quyết định x[i][j][k]
    x = {}
    for i in range(num_employees):
        for j in range(num_days):
            for k in range(num_shifts):
                x[(i, j, k)] = model.NewBoolVar(f'x_{i}_{j}_{k}')

    # Ràng buộc mỗi ngày cần 3 nhân viên cho ca ngày và 1 nhân viên cho ca đêm
    for j in range(num_days):
        model.Add(sum(x[(i, j, 0)] for i in range(num_employees)) == 3)  # Ca ngày (S)
        model.Add(sum(x[(i, j, 1)] for i in range(num_employees)) == 1)  # Ca đêm (T)

    # Ràng buộc số ca làm việc của mỗi nhân viên trong 4 tuần
    for i in range(num_employees):
        if employees[i] in full_time:
            model.Add(sum(x[(i, j, k)] for j in range(num_days) for k in range(num_shifts)) == 18)
        else:
            model.Add(sum(x[(i, j, k)] for j in range(num_days) for k in range(num_shifts)) == 10)

    # Ràng buộc không làm 2 ca một ngày
    for i in range(num_employees):
        for j in range(num_days):
            model.Add(sum(x[(i, j, k)] for k in range(num_shifts)) <= 1)

    # Full-time muốn làm 4-5 ca mỗi tuần
    for i in range(num_employees):
        if employees[i] in full_time:
            for week in range(4):
                week_shifts = sum(x[(i, j, k)] for j in range(week*7, (week+1)*7) for k in range(num_shifts))
                model.AddLinearConstraint(week_shifts, 4, 5)

    # Part-time muốn làm 2-3 ca mỗi tuần
    for i in range(num_employees):
        if employees[i] in part_time:
            for week in range(4):
                week_shifts = sum(x[(i, j, k)] for j in range(week*7, (week+1)*7) for k in range(num_shifts))
                model.AddLinearConstraint(week_shifts, 2, 3)

    # Chuỗi ngày làm việc liên tiếp
    for i in range(num_employees):
        if employees[i] in full_time:
            for j in range(num_days - 5):
                model.Add(sum(x[(i, j + d, 0)] + x[(i, j + d, 1)] for d in range(6)) <= 6)
        else:
            for j in range(num_days - 2):
                model.Add(sum(x[(i, j + d, 0)] + x[(i, j + d, 1)] for d in range(3)) <= 3)

    # Ràng buộc chuỗi ngày liên tiếp
    for i in range(num_employees):
        max_consecutive_days = 6 if employees[i] in full_time else 3
        for j in range(num_days - max_consecutive_days):
            model.Add(sum(x[(i, j + d, 0)] + x[(i, j + d, 1)] for d in range(max_consecutive_days + 1)) <= max_consecutive_days)

    # Khởi tạo solver và giải bài toán
    solver = cp_model.CpSolver()
    status = solver.Solve(model)

    if status == cp_model.OPTIMAL or status == cp_model.FEASIBLE:
        print("Lịch trực của các nhân viên:")
        for i in range(num_employees):
            print(f"Nhân viên {employees[i]}:")
            for j in range(num_days):
                for k in range(num_shifts):
                    if solver.Value(x[(i, j, k)]) == 1:
                        shift = "Ngày (S)" if k == 0 else "Đêm (T)"
                        print(f"  Ngày {j+1}: {shift}")
    else:
        print("Không tìm được giải pháp phù hợp.")

if __name__ == '__main__':
    main()